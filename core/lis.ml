(**
   Top classes and types for defining LIS instances independently of the user interface.
   @author Sébastien Ferré (ferre AT irisa DOT fr)
 *)

(** The type for representing the frequency of a suggestion, when applicable. *)
type freq = { value : int; (** The frequency as a non-negative integer. *)
              partial : bool; (** Whether the frequency reflects a
                                 partial counting. If true, the value
                                 is a lower bound of the real
                                 value. *)
            }

(** The type of suggestion trees to organize suggestions into hierarchies. 
- [`Sugg sugg] is a tree leaf made of a single suggestion [sugg],
- [`Dir (name, fsugg)] is an internal tree node, a kind of directory, with a [name], and a suggestion forest [fsugg] as contents. 

*)
type 'suggestion tree =
  [ `Dir of string * 'suggestion forest
  | `Sugg of 'suggestion ]

(** The type of suggestion forests, which are lists of suggestion trees. *)
 and 'suggestion forest = 'suggestion tree list  

(** Inserts a suggestion into a suggestion forest at some path (a list of directory names).

[insert_suggestion path sugg fsugg] insert suggestion [sugg] into suggestion forest [fsugg] at path [path]. *)
let rec insert_suggestion (path : string list) (sugg : 'suggestion) (forest : 'suggestion forest) : 'suggestion forest =
  match path with
  | [] -> forest @ [`Sugg sugg]
  | dir::path1 -> insert_suggestion_aux dir path1 sugg forest
and insert_suggestion_aux dir path1 sugg forest =
  match forest with
  | [] ->
     [`Dir (dir, insert_suggestion path1 sugg [])]
  | `Dir (dir0, forest0) :: forest1 when dir0=dir ->
     `Dir (dir0, insert_suggestion path1 sugg forest0) :: forest1
  | tree0 :: forest1 ->
     tree0 :: insert_suggestion_aux dir path1 sugg forest1

(** The class of LIS places. A place is created from a LIS instance and a focus. *)
class virtual ['lis,'focus,'extent,'suggestion] place (lis : 'lis) (focus : 'focus) =
object
  (** Returns the LIS instance to which this place belongs. *)
  method lis = lis
             
  (** Returns the focus that defines this place. *)
  method focus = focus

  (** Evaluates this place, and asynchronously calls two processing functions, respectively, on the place extent and on the place suggestions. *)
  method virtual eval : ('extent -> unit) -> ('suggestion forest list -> unit) -> unit

  (** Aborts any on-going computation in the asynchronous evaluation of this place (see {!method:Lis.place.eval}). *)
  method virtual abort : unit

  (** Activates a chosen suggestion, which returns a new place, if well-defined. *)  
  method virtual activate : 'suggestion -> ('lis,'focus,'extent,'suggestion) place option

  (** Returns a JSON representation of this place. This can be used to save a navigation state, and later recover it with {!method:Lis.lis.place_of_json}. *)
  method virtual json : Yojson.Safe.t

  (** Returns a pair (MIME type, contents) to export the place contents (typically results) as a file. *)
  method virtual results : string * string
end

(** The class of LIS instances, parametrized by the type of LIS places. *)
class virtual ['place] lis =
object
  (** Returns the initial place. *)          
  method virtual initial_place : 'place
				   
  (** Recovers a place from its JSON representation, as generated by {!method:Lis.place.json}. *)
  method virtual place_of_json : Yojson.Safe.t -> 'place
				    
end
